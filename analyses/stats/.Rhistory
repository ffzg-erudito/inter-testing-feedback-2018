dat_h1_h2[1]
data %<>% select(totalCorrect)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %<>% group_by(activityFactor)
dat_h1_h2
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(.$activityFactor) %>% map(summary)
dat_h1_h2 %<>% group_by(activityFactor) %>% select(totalCorrect, totalIntrusors)
dat_h1_h2 %<>% select(totalCorrect, totalIntrusors) %>% group_by(activityFactor)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %<>% select(totalCorrect, totalIntrusors) %>% group_by(activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor)
dat_h1_h2
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor) %>% select(totalCorrect, totalIntrusors)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor)
dat_h1_h2[1]
dat_h1_h2[2-3]
length(dat_h1_h2)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor)
for (i in 1:length(dat_h1_h2)){
data <- dat_h1_h2[i]
mvn(data[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
}
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor)
for (group in dat_h1_h2){
mvn(dat_h1_h2[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
}
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor)
mvn(dat_h1_h2[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor)
mvn(dat_h1_h2[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
dat_h1_h2
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor) %>% mvn(dat_h1_h2[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor) %>% {mvn((.%totalCorrect,.$totalIntrusors), mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor) %>% {mvn((.%totalCorrect,.$totalIntrusors), mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor) %>% {mvn(.%totalCorrect,.$totalIntrusors, mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor)
dat_h1_h2[1]
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor) %>% {x}
x
dat_h1_h2
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor)
dat_h1_h2
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %<>% group_by(activityFactor) %>% select(totalCorrect, totalIntrusors)
dat_h1_h2
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor) %>% select(totalCorrect, totalIntrusors)
mvn(.%totalCorrect,.$totalIntrusors, mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
dat_h1_h2
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% group_by(activityFactor) %>% select(totalCorrect, totalIntrusors)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
View(dat_h1_h2)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
groups <- unique(dat_h1_h2$activityFactor)
for (i in 1:length(groups)){
this_df <- dat_h1_h2[dat_h1_h2$activityFactor == groups[i]]
this_df %<>% select(totalCorrect, totalIntrusors)
mvn(this_df, mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)}
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
groups <- unique(dat_h1_h2$activityFactor)
for (i in 1:length(groups)){
this_df <- dat_h1_h2[dat_h1_h2$activityFactor == groups[i]]
this_df %<>% select(totalCorrect, totalIntrusors)
mvn(this_df, mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)}
groups <- unique(dat_h1_h2$activityFactor)
groups <- unique(dat_h1_h2$activityFactor)
groups
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
for (i in 1:length(groups)){
this_df <- dat_h1_h2[dat_h1_h2$activityFactor == groups[i]]
this_df %<>% select(totalCorrect, totalIntrusors)
mvn(this_df, mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)}
i <- 1
this_df <- dat_h1_h2[dat_h1_h2$activityFactor == groups[i]]
this_df %<>% select(totalCorrect, totalIntrusors)
this_df %<>% select('totalCorrect', 'totalIntrusors')
this_df <- dat_h1_h2[dat_h1_h2$activityFactor == groups[i]]
this_df
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
dat_h1_h2
dat_h1_h2[dat_h1_h2$activityFactor == groups[i]]
dat_h1_h2[contetn]
dat_h1_h2[content]
dat_h1_h2$content
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
for (name in names(dat_h1_h2){
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
for (name in names(dat_h1_h2)){
print(name)
}
for (name in names(dat_h1_h2)){
dat_h1_h2[[name]]
}
dat_h1_h2[[content]]
dat_h1_h2[['content']]
this_df <- dat_h1_h2[[name]][2-3]
this_df
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
for (name in names(dat_h1_h2)){
this_df <- dat_h1_h2[[name]][2-3]
mvn(this_df, mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
}
this_df <- dat_h1_h2[groups[1]]
groups <- names(dat_h1_h2)
this_df <- dat_h1_h2[groups[1]]
this_df
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
groups <- names(dat_h1_h2)
this_df <- dat_h1_h2[groups[1]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
groups <- names(dat_h1_h2)
this_df <- dat_h1_h2[groups[1]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
groups <- names(dat_h1_h2)
groups
this_df <- dat_h1_h2[groups[1]]
this_df
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
groups <- names(dat_h1_h2)
this_df <- dat_h1_h2[[groups[1]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
this_df <- dat_h1_h2[[groups[2]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
}
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
groups <- names(dat_h1_h2)
this_df <- dat_h1_h2[[groups[1]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
groups <- names(dat_h1_h2)
this_df <- dat_h1_h2[[groups[1]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
this_df <- dat_h1_h2[[groups[2]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
this_df <- dat_h1_h2[[groups[3]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
library(here)
# NOTE: this will load {magrittr}, {here}, {conflicted} and {tidyverse}. also,
# `conflict_prefer`s filter from {dplyr}
# furthermore, it loads 3 data.frames: (1) `dat` which contains the pooled data run
# through `2-wrangling-main.R`, (2) `datHard` which is `dat` with all the hard
# exclusion criteria applied (as described in `analysis-plan.md`), and (3)
# `datSoft` which is `datHard` with the soft exclusion criteria applied (as
# described in `analysis-plan.md`)
source(here('wrangling', '3-exclusion-criteria.R'))
# import MVN library for outlier detection and testing normality assumptions, and other libs
library(rmarkdown)
library(MVN)
library(purrr)
library(haven)
library(psych)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% describeBy(dat_h1_h2$activityFactor, skew = TRUE, ranges = TRUE)
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(.$activityFactor) %>% map(summary)
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
groups <- names(dat_h1_h2)
this_df <- dat_h1_h2[[groups[1]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
this_df <- dat_h1_h2[[groups[2]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
this_df <- dat_h1_h2[[groups[3]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE, showNewData = TRUE)
groups[1]
groups[2]
corr.test(this_df[2-3])
this_df <- dat_h1_h2[[groups[3]]] # select rereading group
corr.test(this_df[2-3])
this_df <- dat_h1_h2[[groups[2]]]
corr.test(this_df[2-3])
this_df <- dat_h1_h2[[groups[1]]]
corr.test(this_df[2-3])
library(here)
# NOTE: this will load {magrittr}, {here}, {conflicted} and {tidyverse}. also,
# `conflict_prefer`s filter from {dplyr}
# furthermore, it loads 3 data.frames: (1) `dat` which contains the pooled data run
# through `2-wrangling-main.R`, (2) `datHard` which is `dat` with all the hard
# exclusion criteria applied (as described in `analysis-plan.md`), and (3)
# `datSoft` which is `datHard` with the soft exclusion criteria applied (as
# described in `analysis-plan.md`)
source(here('wrangling', '3-exclusion-criteria.R'))
# import MVN library for outlier detection and testing normality assumptions, and other libs
library(rmarkdown)
library(MVN)
library(purrr)
library(haven)
library(psych)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% describeBy(dat_h1_h2$activityFactor, skew = TRUE, ranges = TRUE)
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(.$activityFactor) %>% map(summary)
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
groups <- names(dat_h1_h2)
# select content group
this_df <- dat_h1_h2[[groups[1]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
# select general group
this_df <- dat_h1_h2[[groups[2]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
this_df <- dat_h1_h2[[groups[3]]] # select rereading group
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
manova(ungroup(dat_h1_h2))
manova(dat_h1_h2.ungroup())
manova(dat_h1_h2.ungroup)
manova(dat_h1_h2)
res.man <- manova(cbind(totalCorrect, totalIntrusors) ~ activityFactor, data = dat_h1_h2)
dat_h1_h2 <- unsplit(dat_h1_h2)
dat_h1_h2 <- unsplit(dat_h1_h2, activityFactor)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
res.man <- manova(cbind(totalCorrect, totalIntrusors) ~ activityFactor, data = dat_h1_h2)
summary(res.man)
summary(res.man, 'Wilks')
groups <- unique(dat_h1_h2$activityFactor)
groups
groups <- names(dat_h1_h2)
groups
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
# select content group
this_df <- dat_h1_h2[[groups[1]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
# select rereading group
this_df <- dat_h1_h2[[groups[3]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
dat_h1_h2 <- unsplit(dat_h1_h2, activityFactor)
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
library(here)
# NOTE: this will load {magrittr}, {here}, {conflicted} and {tidyverse}. also,
# `conflict_prefer`s filter from {dplyr}
# furthermore, it loads 3 data.frames: (1) `dat` which contains the pooled data run
# through `2-wrangling-main.R`, (2) `datHard` which is `dat` with all the hard
# exclusion criteria applied (as described in `analysis-plan.md`), and (3)
# `datSoft` which is `datHard` with the soft exclusion criteria applied (as
# described in `analysis-plan.md`)
source(here('wrangling', '3-exclusion-criteria.R'))
# import MVN library for outlier detection and testing normality assumptions, and other libs
library(rmarkdown)
library(MVN)
library(purrr)
library(haven)
library(psych)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% describeBy(dat_h1_h2$activityFactor, skew = TRUE, ranges = TRUE)
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(.$activityFactor) %>% map(summary)
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
# select content group
this_df <- dat_h1_h2[[groups[1]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
# select general group
this_df <- dat_h1_h2[[groups[2]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
# select rereading group
this_df <- dat_h1_h2[[groups[3]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
dat_h1_h2 <- unsplit(dat_h1_h2, activityFactor)
dat_h1_h2 <- unsplit(dat_h1_h2, 'activityFactor')
res.man <- manova(cbind(totalCorrect, totalIntrusors) ~ activityFactor, data = dat_h1_h2)
dat_h1_h2 <- unsplit(dat_h1_h2, dat_h1_h2.activityFactor)
dat_h1_h2 <- unsplit(dat_h1_h2)
dat_h1_h2
dat_h1_h2 <- unsplit(dat_h1_h2)
res.man <- manova(cbind(totalCorrect, totalIntrusors) ~ activityFactor, data = dat_h1_h2)
dat_h1_h2
install.packages(c("backports", "BDgraph", "BH", "broom", "callr", "carData", "caTools", "checkmate", "clipr", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "e1071", "evaluate", "fansi", "flexmix", "forcats", "ggplot2", "gWidgets", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "huge", "igraph", "jomo", "jsonlite", "kableExtra", "knitr", "laeken", "later", "lme4", "maptools", "markdown", "MASS", "mclust", "mgcv", "mice", "mime", "mitml", "modelr", "MVN", "mvtnorm", "naniar", "network", "nloptr", "OpenMx", "openssl", "ordinal", "paran", "pbapply", "pillar", "prabclus", "processx", "ps", "psych", "purrr", "qgraph", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "rio", "robCompositions", "rockchalk", "rpf", "rrcov", "rstudioapi", "skimr", "StanHeaders", "statnet.common", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "VIM", "visdat", "wrapr", "xfun", "XML", "xts", "zCompositions", "zip"))
install.packages(c("backports", "BDgraph", "BH", "broom", "callr", "carData", "caTools", "checkmate", "clipr", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "e1071", "evaluate", "fansi", "flexmix", "forcats", "ggplot2", "gWidgets", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "huge", "igraph", "jomo", "jsonlite", "kableExtra", "knitr", "laeken", "later", "lme4", "maptools", "markdown", "MASS", "mclust", "mgcv", "mice", "mime", "mitml", "modelr", "MVN", "mvtnorm", "naniar", "network", "nloptr", "OpenMx", "openssl", "ordinal", "paran", "pbapply", "pillar", "prabclus", "processx", "ps", "psych", "purrr", "qgraph", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "rio", "robCompositions", "rockchalk", "rpf", "rrcov", "rstudioapi", "skimr", "StanHeaders", "statnet.common", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "VIM", "visdat", "wrapr", "xfun", "XML", "xts", "zCompositions", "zip"))
install.packages(c("backports", "BDgraph", "BH", "broom", "callr", "carData", "caTools", "checkmate", "clipr", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "e1071", "evaluate", "fansi", "flexmix", "forcats", "ggplot2", "gWidgets", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "huge", "igraph", "jomo", "jsonlite", "kableExtra", "knitr", "laeken", "later", "lme4", "maptools", "markdown", "MASS", "mclust", "mgcv", "mice", "mime", "mitml", "modelr", "MVN", "mvtnorm", "naniar", "network", "nloptr", "OpenMx", "openssl", "ordinal", "paran", "pbapply", "pillar", "prabclus", "processx", "ps", "psych", "purrr", "qgraph", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "rio", "robCompositions", "rockchalk", "rpf", "rrcov", "rstudioapi", "skimr", "StanHeaders", "statnet.common", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "VIM", "visdat", "wrapr", "xfun", "XML", "xts", "zCompositions", "zip"))
install.packages(c("backports", "BDgraph", "BH", "broom", "callr", "carData", "caTools", "checkmate", "clipr", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "e1071", "evaluate", "fansi", "flexmix", "forcats", "ggplot2", "gWidgets", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "huge", "igraph", "jomo", "jsonlite", "kableExtra", "knitr", "laeken", "later", "lme4", "maptools", "markdown", "MASS", "mclust", "mgcv", "mice", "mime", "mitml", "modelr", "MVN", "mvtnorm", "naniar", "network", "nloptr", "OpenMx", "openssl", "ordinal", "paran", "pbapply", "pillar", "prabclus", "processx", "ps", "psych", "purrr", "qgraph", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "rio", "robCompositions", "rockchalk", "rpf", "rrcov", "rstudioapi", "skimr", "StanHeaders", "statnet.common", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "VIM", "visdat", "wrapr", "xfun", "XML", "xts", "zCompositions", "zip"))
install.packages(c("backports", "BDgraph", "BH", "broom", "callr", "carData", "caTools", "checkmate", "clipr", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "e1071", "evaluate", "fansi", "flexmix", "forcats", "ggplot2", "gWidgets", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "huge", "igraph", "jomo", "jsonlite", "kableExtra", "knitr", "laeken", "later", "lme4", "maptools", "markdown", "MASS", "mclust", "mgcv", "mice", "mime", "mitml", "modelr", "MVN", "mvtnorm", "naniar", "network", "nloptr", "OpenMx", "openssl", "ordinal", "paran", "pbapply", "pillar", "prabclus", "processx", "ps", "psych", "purrr", "qgraph", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "rio", "robCompositions", "rockchalk", "rpf", "rrcov", "rstudioapi", "skimr", "StanHeaders", "statnet.common", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "VIM", "visdat", "wrapr", "xfun", "XML", "xts", "zCompositions", "zip"))
install.packages(c("backports", "BDgraph", "BH", "broom", "callr", "carData", "caTools", "checkmate", "clipr", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "e1071", "evaluate", "fansi", "flexmix", "forcats", "ggplot2", "gWidgets", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "huge", "igraph", "jomo", "jsonlite", "kableExtra", "knitr", "laeken", "later", "lme4", "maptools", "markdown", "MASS", "mclust", "mgcv", "mice", "mime", "mitml", "modelr", "MVN", "mvtnorm", "naniar", "network", "nloptr", "OpenMx", "openssl", "ordinal", "paran", "pbapply", "pillar", "prabclus", "processx", "ps", "psych", "purrr", "qgraph", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "rio", "robCompositions", "rockchalk", "rpf", "rrcov", "rstudioapi", "skimr", "StanHeaders", "statnet.common", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "VIM", "visdat", "wrapr", "xfun", "XML", "xts", "zCompositions", "zip"))
install.packages(c("backports", "BDgraph", "BH", "broom", "callr", "carData", "caTools", "checkmate", "clipr", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "e1071", "evaluate", "fansi", "flexmix", "forcats", "ggplot2", "gWidgets", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "huge", "igraph", "jomo", "jsonlite", "kableExtra", "knitr", "laeken", "later", "lme4", "maptools", "markdown", "MASS", "mclust", "mgcv", "mice", "mime", "mitml", "modelr", "MVN", "mvtnorm", "naniar", "network", "nloptr", "OpenMx", "openssl", "ordinal", "paran", "pbapply", "pillar", "prabclus", "processx", "ps", "psych", "purrr", "qgraph", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "rio", "robCompositions", "rockchalk", "rpf", "rrcov", "rstudioapi", "skimr", "StanHeaders", "statnet.common", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "VIM", "visdat", "wrapr", "xfun", "XML", "xts", "zCompositions", "zip"))
install.packages(c("backports", "BDgraph", "BH", "broom", "callr", "carData", "caTools", "checkmate", "clipr", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "e1071", "evaluate", "fansi", "flexmix", "forcats", "ggplot2", "gWidgets", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "huge", "igraph", "jomo", "jsonlite", "kableExtra", "knitr", "laeken", "later", "lme4", "maptools", "markdown", "MASS", "mclust", "mgcv", "mice", "mime", "mitml", "modelr", "MVN", "mvtnorm", "naniar", "network", "nloptr", "OpenMx", "openssl", "ordinal", "paran", "pbapply", "pillar", "prabclus", "processx", "ps", "psych", "purrr", "qgraph", "quantreg", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "rio", "robCompositions", "rockchalk", "rpf", "rrcov", "rstudioapi", "skimr", "StanHeaders", "statnet.common", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "VIM", "visdat", "wrapr", "xfun", "XML", "xts", "zCompositions", "zip"))
dat_h1_h2 <- unsplit(dat_h1_h2, 'activityFactor')
res.man <- manova(cbind(totalCorrect, totalIntrusors) ~ activityFactor, data = dat_h1_h2)
dat_h1_h2
library(here)
# NOTE: this will load {magrittr}, {here}, {conflicted} and {tidyverse}. also,
# `conflict_prefer`s filter from {dplyr}
# furthermore, it loads 3 data.frames: (1) `dat` which contains the pooled data run
# through `2-wrangling-main.R`, (2) `datHard` which is `dat` with all the hard
# exclusion criteria applied (as described in `analysis-plan.md`), and (3)
# `datSoft` which is `datHard` with the soft exclusion criteria applied (as
# described in `analysis-plan.md`)
source(here('wrangling', '3-exclusion-criteria.R'))
# import MVN library for outlier detection and testing normality assumptions, and other libs
library(rmarkdown)
library(MVN)
library(purrr)
library(haven)
library(psych)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% describeBy(dat_h1_h2$activityFactor, skew = TRUE, ranges = TRUE)
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(.$activityFactor) %>% map(summary)
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
# select content group
this_df <- dat_h1_h2[[groups[1]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
# select general group
this_df <- dat_h1_h2[[groups[2]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
# select rereading group
this_df <- dat_h1_h2[[groups[3]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
dat_h1_h2 <- unsplit(dat_h1_h2, 'activityFactor')
res.man <- manova(cbind(totalCorrect, totalIntrusors) ~ activityFactor, data = dat_h1_h2)
library(here)
# NOTE: this will load {magrittr}, {here}, {conflicted} and {tidyverse}. also,
# `conflict_prefer`s filter from {dplyr}
# furthermore, it loads 3 data.frames: (1) `dat` which contains the pooled data run
# through `2-wrangling-main.R`, (2) `datHard` which is `dat` with all the hard
# exclusion criteria applied (as described in `analysis-plan.md`), and (3)
# `datSoft` which is `datHard` with the soft exclusion criteria applied (as
# described in `analysis-plan.md`)
source(here('wrangling', '3-exclusion-criteria.R'))
# import MVN library for outlier detection and testing normality assumptions, and other libs
library(rmarkdown)
library(MVN)
library(purrr)
library(haven)
library(psych)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% describeBy(dat_h1_h2$activityFactor, skew = TRUE, ranges = TRUE)
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(.$activityFactor) %>% map(summary)
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
# select content group
this_df <- dat_h1_h2[[groups[1]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
# select general group
this_df <- dat_h1_h2[[groups[2]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
# select rereading group
this_df <- dat_h1_h2[[groups[3]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
dat_h1_h2 <- unsplit(dat_h1_h2, activityFactor)
View(dat_h1_h2)
dat_h1_h2 <- unsplit(dat_h1_h2)
dat_h1_h2 <- unsplit(dat_h1_h2, dat_h1_h2$activityFactor)
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
library(here)
# NOTE: this will load {magrittr}, {here}, {conflicted} and {tidyverse}. also,
# `conflict_prefer`s filter from {dplyr}
# furthermore, it loads 3 data.frames: (1) `dat` which contains the pooled data run
# through `2-wrangling-main.R`, (2) `datHard` which is `dat` with all the hard
# exclusion criteria applied (as described in `analysis-plan.md`), and (3)
# `datSoft` which is `datHard` with the soft exclusion criteria applied (as
# described in `analysis-plan.md`)
source(here('wrangling', '3-exclusion-criteria.R'))
# import MVN library for outlier detection and testing normality assumptions, and other libs
library(rmarkdown)
library(MVN)
library(purrr)
library(haven)
library(psych)
dat_h1_h2 <- datHard[datHard$giveFeedback == 0,]
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% describeBy(dat_h1_h2$activityFactor, skew = TRUE, ranges = TRUE)
dat_h1_h2 %>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(.$activityFactor) %>% map(summary)
groups <- unique(dat_h1_h2$activityFactor)
dat_h1_h2 %<>% select(activityFactor, totalCorrect, totalIntrusors) %>% split(dat_h1_h2$activityFactor)
# select content group
this_df <- dat_h1_h2[[groups[1]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
# select general group
this_df <- dat_h1_h2[[groups[2]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
# select rereading group
this_df <- dat_h1_h2[[groups[3]]]
mvn(this_df[2-3], mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5, desc = TRUE, transform = "none",
univariateTest = c("SW"), univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", showOutliers = TRUE)
corr.test(this_df[2-3])
dat_h1_h2 <- unsplit(dat_h1_h2)
dat_h1_h2 <- unsplit(dat_h1_h2, groups)
dat_h1_h2 <- unsplit(dat_h1_h2, names)
dat_h1_h2 <- unsplit(dat_h1_h2, activityFactor)
View(datHard)
View(dat_h1_h2)
dat_h1_h2 <- unsplit(dat_h1_h2, groups)
100 %>% t
t
